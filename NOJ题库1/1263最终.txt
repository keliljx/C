#include<iostream>
using namespace std;

int color, a[8][8];

void readdata();

int luozi(int tmp_row, int tmp_col);//判断在棋盘中能否落子

int count_after_luozi(int tmp_row, int tmp_col);//计算落子后所下颜色棋子的数目

void change_state(int tmp_row, int tmp_col);

int luozi_up(int tmp_row, int tmp_col, int &num1, int &num2);
int luozi_down(int tmp_row, int tmp_col, int &num1, int &num2);
int luozi_left(int tmp_row, int tmp_col, int &num1, int &num2);
int luozi_right(int tmp_row, int tmp_col, int &num1, int &num2);
int luozi_lu(int tmp_row, int tmp_col, int &num1, int &num2);
int luozi_ld(int tmp_row, int tmp_col, int &num1, int &num2);
int luozi_ru(int tmp_row, int tmp_col, int &num1, int &num2);
int luozi_rd(int tmp_row, int tmp_col, int &num1, int &num2);

int main()
{
	int i, j, max, flag, count, row, col;
	readdata();
	flag = 0;
	max = 0;
	for(i = 0; i < 8; i++)
	{
		for(j = 0; j < 8; j++)
		{
			if(luozi(i, j) == 1)
			{
				flag = 1;
				count = count_after_luozi(i, j);
				if(count > max)
				{
					max = count;
					row = i;
				    col = j;
				}
			}
		}
	}
	if(flag == 1)
	{
		cout<<row<<" "<<col<<endl;
	}
	else
	{
		cout<<"Impossible"<<endl;
	}
	return 0;
}

void readdata()
{
	int i, j;
	for(i = 0; i < 8; i++)
	{
		for(j = 0; j < 8; j++)
		{
			cin>>a[i][j];
		}
	}
	cin>>color;
}

int luozi(int tmp_row, int tmp_col)
{
	int val, num1,num2;
	val = 0;
	if(luozi_up(tmp_row, tmp_col, num1,num2) == 1)
	{
		val = 1;
	}
	if(luozi_down(tmp_row, tmp_col, num1,num2) == 1)
	{
		val = 1;
	}
	if(luozi_left(tmp_row, tmp_col, num1,num2) == 1)
	{
		val = 1;
	}
	if(luozi_right(tmp_row, tmp_col, num1,num2) == 1)
	{
		val = 1;
	}
	if(luozi_lu(tmp_row, tmp_col, num1,num2) == 1)
	{
		val = 1;
	}
	if(luozi_ld(tmp_row, tmp_col, num1,num2) == 1)
	{
		val = 1;
	}
	if(luozi_ru(tmp_row, tmp_col, num1,num2) == 1)
	{
		val = 1;
	}
	if(luozi_rd(tmp_row, tmp_col, num1,num2) == 1)
	{
		val = 1;
	}
	return val;
}

int count_after_luozi(int tmp_row, int tmp_col)
{
	int count, tmp_a[8][8], i ,j;
	count = 0;
	for(i =0; i< 8;i++)
	{
		for(j=0;j<8;j++)
		{
			tmp_a[i][j]=a[i][j];
		}
	}
	
	change_state(tmp_row, tmp_col);

	for(i =0; i< 8;i++)
	{
		for(j=0;j<8;j++)
		{
			if(a[i][j] == color)
			{
				count++;
			}
		}
	}	

    for(i =0; i< 8;i++)
	{
		for(j=0;j<8;j++)
		{
			a[i][j]=tmp_a[i][j];
		}
	}
	return count;
}

void change_state(int tmp_row, int tmp_col)
{
	int num1, num2, i, j;
	if(luozi_up(tmp_row, tmp_col, num1, num2)==1)
	{
		for(i = tmp_row-1; i>=num1; i--)
		{
			a[i][tmp_col] = color;
		}		
	}
	if(luozi_down(tmp_row, tmp_col, num1, num2)==1)
	{
		for(i = tmp_row+1; i<=num1; i++)
		{
			a[i][tmp_col] = color;
		}
	}
	if(luozi_left(tmp_row, tmp_col, num1, num2)==1)
	{
		for(j = tmp_col-1; j>=num2; j--)
		{
			a[tmp_row][j] = color;
		}
	}
	if(luozi_right(tmp_row, tmp_col, num1, num2)==1)
	{
		for(j = tmp_col+1; j<=num2; j++)
		{
			a[tmp_row][j] = color;
		}
	}
	if(luozi_lu(tmp_row, tmp_col, num1, num2)==1)
	{
		i = tmp_row-1;
		j = tmp_col-1;
		while(i>= num1 && j>=num2)
		{
			a[i][j] = color;
			 i--;
			 j--;
		}
	}
	if(luozi_ld(tmp_row, tmp_col, num1, num2)==1)
	{
		i = tmp_row+1;
		j = tmp_col-1;
		while(i <= num1 && j >=num2)
		{
			a[i][j] = color;
			 i++;
			 j--;
		}
	}
	if(luozi_ru(tmp_row, tmp_col, num1, num2)==1)
	{
		i = tmp_row-1;
		j = tmp_col+1;
		while(i>= num1 && j<=num2)
		{
			a[i][j] = color;
			 i--;
			 j++;
		}
	}
	if(luozi_rd(tmp_row, tmp_col, num1, num2)==1)
	{
		i = tmp_row+1;
		j = tmp_col+1;
		while(i<= num1 && j<=num2)
		{
			a[i][j] = color;
			 i++;
			 j++;
		}
	}

	a[tmp_row][tmp_col] = color;
}


int luozi_up(int tmp_row, int tmp_col, int &num1, int &num2)
{
	int val;
	val=0;
	if(a[tmp_row][tmp_col] != 0)
	{
		val = 0;
	}
	else
	{
		int r, c;	
		r=tmp_row - 1;
		c=tmp_col;
		if(r < 0 || a[r][c] == 0 || a[r][c] == color)
		{
			val=0;
		}
		else
		{
			while(r >= 0 && a[r][c] != color && a[r][c] != 0)
			{
				r--;
			}
			if(r < 0)
			{
				val=0;
			}
			if(r >= 0 && a[r][c]==color)
			{
				val=1;
				num1=r;
				num2=c;
			}
		}
	}
	return val;	
}

int luozi_down(int tmp_row, int tmp_col, int &num1, int &num2)
{
	int val;
	val=0;
	if(a[tmp_row][tmp_col] != 0)
	{
		val = 0;
	}
	else
	{
		int r, c;	
		r=tmp_row + 1;
		c=tmp_col;
		if(r > 7 || a[r][c] == 0 || a[r][c] == color)
		{
			val=0;
		}
		else
		{
			while(r <= 7 && a[r][c] != color && a[r][c] != 0)
			{
				r++;
			}
			if(r > 7)
			{
				val=0;
			}
			if(r <= 7 && a[r][c]==color)
			{
				val=1;
				num1=r;
				num2=c;
			}
		}
	}
	return val;
}

int luozi_left(int tmp_row, int tmp_col, int &num1, int &num2)
{
	int val;
	val=0;
	if(a[tmp_row][tmp_col] != 0)
	{
		val = 0;
	}
	else
	{
		int r, c;	
		r=tmp_row;
		c=tmp_col - 1;
		if(c < 0 || a[r][c] == 0 || a[r][c] == color)
		{
			val=0;
		}
		else
		{
			while(c >= 0 && a[r][c] != color && a[r][c] != 0)
			{
				c--;
			}
			if(c < 0)
			{
				val=0;
			}
			if(c >= 0 && a[r][c]==color)
			{
				val=1;
				num1=r;
				num2=c;			
			}
		}
	}
	return val;
}

int luozi_right(int tmp_row, int tmp_col, int &num1, int &num2)
{
	int val;
	val=0;
	if(a[tmp_row][tmp_col] != 0)
	{
		val = 0;
	}
	else
	{
		int r, c;	
		r=tmp_row;
		c=tmp_col + 1;
		if(c > 7 || a[r][c] == 0 || a[r][c] == color)
		{
			val=0;
		}
		else
		{
			while(c <= 7 && a[r][c] != color && a[r][c] != 0)
			{
				c++;
			}
			if(c > 7)
			{
				val=0;
			}
			if(c <= 7 && a[r][c]==color)
			{
				val=1;
				num1=r;
				num2=c;
			}
		}
	}
	return val;
}

int luozi_lu(int tmp_row, int tmp_col, int &num1, int &num2)
{
	int val;
	val=0;
	if(a[tmp_row][tmp_col] != 0)
	{
		val = 0;
	}
	else
	{
		int r, c;	
		r=tmp_row - 1;
		c=tmp_col - 1;
		if(c < 0 || r < 0 || a[r][c] == 0 || a[r][c] == color)
		{
			val=0;
		}
		else
		{
			while(r >= 0 && c >= 0 && a[r][c] != color && a[r][c] != 0)
			{
				r--;
				c--;
			}
			if(c < 0 || r < 0)
			{
				val=0;
			}
			if(c >= 0 && r >=0 && a[r][c]==color)
			{
				val=1;
				num1=r;
				num2=c;
			}
		}
	}
	return val;
}

int luozi_ld(int tmp_row, int tmp_col, int &num1, int &num2)
{
	int val;
	val=0;
	if(a[tmp_row][tmp_col] != 0)
	{
		val = 0;
	}
	else
	{
		int r, c;	
		r=tmp_row + 1;
		c=tmp_col - 1;
		if(c < 0 || r > 7 || a[r][c] == 0 || a[r][c] == color)
		{
			val=0;
		}
		else
		{
			while(r <= 7 && c >= 0 && a[r][c] != color && a[r][c] != 0)
			{
				r++;
				c--;
			}
			if(c < 0 || r > 7)
			{
				val=0;
			}
			if(c >= 0 && r <= 7 && a[r][c]==color)
			{
				val=1;
				num1=r;
				num2=c;			
			}
		}
	}
	return val;
}

int luozi_ru(int tmp_row, int tmp_col, int &num1, int &num2)
{
	int val;
	val=0;
	if(a[tmp_row][tmp_col] != 0)
	{
		val = 0;
	}
	else
	{
		int r, c;	
		r=tmp_row - 1;
		c=tmp_col + 1;
		if(c > 7 || r < 0 || a[r][c] == 0 || a[r][c] == color)
		{
			val=0;
		}
		else
		{
			while(r >= 0 && c <= 7 && a[r][c] != color && a[r][c] != 0)
			{
				r--;
				c++;
			}
			if(c > 7 || r < 0)
			{
				val=0;
			}
			if(c <= 7 && r >=0 && a[r][c]==color)
			{
				val=1;
				num1=r;
				num2=c;
			}
		}
	}
	return val;
}

int luozi_rd(int tmp_row, int tmp_col, int &num1, int &num2)
{
	int val;
	val=0;
	if(a[tmp_row][tmp_col] != 0)
	{
		val = 0;
	}
	else
	{
		int r, c;	
		r=tmp_row + 1;
		c=tmp_col + 1;
		if(c > 7 || r > 7 || a[r][c] == 0 || a[r][c] == color)
		{
			val=0;
		}
		else
		{
			while(r <= 7 && c <= 7 && a[r][c] != color && a[r][c] != 0)
			{
				r++;
				c++;
			}
			if(c > 7 || r > 7)
			{
				val=0;
			}
			if(c <= 7 && r <=7 && a[r][c]==color)
			{
				val=1;
				num1=r;
				num2=c;
			}
		}
	}
	return val;
}
